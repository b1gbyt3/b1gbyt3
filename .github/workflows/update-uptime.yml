name: Update Profile Stats in README

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  update_readme:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests python-dateutil

      - name: Update Profile Stats
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SYSTEM_START_TIME: ${{ secrets.SYSTEM_START_TIME }}
          GITHUB_USERNAME: ${{ github.repository_owner }}
        run: |
          python - <<EOF
          import os
          import sys
          import re
          import json
          from datetime import date, datetime
          from dateutil.relativedelta import relativedelta
          import requests

          github_token = os.environ.get('GITHUB_TOKEN')
          start_time_str = os.environ.get('SYSTEM_START_TIME')
          username = os.environ.get('GITHUB_USERNAME')
          readme_path = 'README.md'
          graphql_url = 'https://api.github.com/graphql'

          if not start_time_str:
              print("ERROR: SYSTEM_START_TIME is not set or is empty.", file=sys.stderr)
              sys.exit(1)

          try:
              start_date = date.fromisoformat(start_time_str)
          except ValueError:
              print(f"ERROR: SYSTEM_START_TIME '{start_time_str}' is not a valid YYYY-MM-DD date.", file=sys.stderr)
              sys.exit(1)

          current_date = date.today()
          delta = relativedelta(current_date, start_date)

          years = max(0, delta.years)
          months = max(0, delta.months)
          days = max(0, delta.days)

          uptime_parts = []
          if years:
              uptime_parts.append(f"{years} {'years' if years != 1 else 'year'}")
          if months:
              uptime_parts.append(f"{months} {'months' if months != 1 else 'month'}")
          if days or not uptime_parts:
              uptime_parts.append(f"{days} {'days' if days != 1 else 'day'}")

          uptime_string = " ".join(uptime_parts)
          print(f"Calculated Uptime: {uptime_string}")

          def run_graphql_query(query, variables):
              headers = {'Authorization': f'Bearer {github_token}'}
              response = None
              try:
                  response = requests.post(graphql_url, json={'query': query, 'variables': variables}, headers=headers)
                  response.raise_for_status()
                  return response.json()
              except requests.exceptions.RequestException as e:
                  print(f"ERROR during GraphQL request: {e}", file=sys.stderr)
                  if response is not None:
                      print(f"Response status: {response.status_code}", file=sys.stderr)
                      try:
                          print(f"Response body: {response.json()}", file=sys.stderr)
                      except json.JSONDecodeError:
                          print(f"Response body: {response.text}", file=sys.stderr)
                  return None
              except Exception as e:
                   print(f"ERROR processing GraphQL request: {e}", file=sys.stderr)
                   return None

          personal_repos = 0
          contributions = 0
          all_repo_nodes = []
          has_next_page = True
          cursor = None

          repo_query = """
          query GetUserRepos($login: String!, $cursor: String) {
            user(login: $login) {
              repositories(first: 100, after: $cursor, ownerAffiliations: [OWNER]) {
                nodes {
                  name
                  isFork
                }
                pageInfo {
                  endCursor
                  hasNextPage
                }
              }
            }
          }
          """

          print("Fetching repository stats using GraphQL...")
          while has_next_page:
              variables = {'login': username, 'cursor': cursor}
              result = run_graphql_query(repo_query, variables)

              if result is None or 'errors' in result:
                  print(f"ERROR: GraphQL query failed. Result: {result}", file=sys.stderr)
                  personal_repos = 0
                  contributions = 0
                  has_next_page = False
                  break

              data = result.get('data')
              if data is None:
                  print(f"ERROR: 'data' key not found in GraphQL response. Result: {result}", file=sys.stderr)
                  personal_repos = 0
                  contributions = 0
                  has_next_page = False
                  break

              user_data = data.get('user')
              if user_data is None:
                   print(f"ERROR: 'user' key not found in GraphQL data. Result: {result}", file=sys.stderr)
                   personal_repos = 0
                   contributions = 0
                   has_next_page = False
                   break

              repositories = user_data.get('repositories', {})
              nodes = repositories.get('nodes', [])
              page_info = repositories.get('pageInfo', {})

              if nodes is not None:
                  all_repo_nodes.extend(nodes)
              else:
                  print("Warning: 'nodes' key returned None or was missing.", file=sys.stderr)

              cursor = page_info.get('endCursor')
              has_next_page = page_info.get('hasNextPage', False)

              if has_next_page and cursor is None:
                  print("ERROR: hasNextPage is true but endCursor is null. Stopping pagination.", file=sys.stderr)
                  has_next_page = False

          if all_repo_nodes:
              for repo in all_repo_nodes:
                  if repo and isinstance(repo, dict):
                      if repo.get('isFork', False):
                          contributions += 1
                      else:
                          personal_repos += 1
                  elif repo is not None:
                      print(f"Warning: Encountered non-dictionary item in repository nodes: {repo}", file=sys.stderr)

          print(f"Fetched Repositories: {personal_repos} (personal), {contributions} (contributions)")

          try:
              with open(readme_path, 'r', encoding='utf-8') as file:
                  readme_content = file.read()

              readme_content = re.sub(
                  r'(- \*\*⏳ Uptime:\*\*\s*).*?(?=<br>|$)',
                  f'\\1{uptime_string}<br>',
                  readme_content,
                  flags=re.IGNORECASE
              )

              repo_string = f"{personal_repos} (personal), {contributions} (contributions)"
              readme_content = re.sub(
                  r'(- \*\*📂 Repositories:\*\*\s*).*?(?=<br>|$)',
                  f'\\1{repo_string}<br>',
                  readme_content,
                  flags=re.IGNORECASE
              )

              with open(readme_path, 'w', encoding='utf-8') as file:
                  file.write(readme_content)

              print(f"{readme_path} updated successfully.")

          except FileNotFoundError:
              print(f"ERROR: {readme_path} not found.", file=sys.stderr)
              sys.exit(1)
          except Exception as e:
              print(f"Error updating {readme_path}: {e}", file=sys.stderr)
              sys.exit(1)
          EOF

      - name: Commit and Push Changes
        run: |
          git config --local user.email "github-actions-bot@b1gbyt3.github.io"
          git config --local user.name "b1gbyt3/GitHub-Actions-Bot"
          git add README.md
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore: update profile stats via graphql"
            git push
            echo "Changes committed and pushed successfully."
          fi
